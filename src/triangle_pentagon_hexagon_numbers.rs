/// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
/// Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
/// Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
/// Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
///
/// It can be verified that T285 = P165 = H143 = 40755.
///
/// Find the next triangle number that is also pentagonal and hexagonal.

fn is_pentagonal(n: f64) -> bool {
    let test_num: f64 = ((24. * n + 1.).sqrt() + 1.) / 6.;
    test_num == test_num.floor()
}

fn is_triangle(n: f64) -> bool {
    let test_num: f64 = ((8. * n + 1.).sqrt() - 1.) / 2.;
    test_num == test_num.floor()
}

fn is_hexagonal(n: f64) -> bool {
    let test_num: f64 = ((8. * n + 1.).sqrt() + 1.) / 4.;
    test_num == test_num.floor()
}

fn create_triangle_number(nth: u64) -> u64 {
    (nth * (nth + 1)) / 2
}

///Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
///Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
///Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
///Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
///
///It can be verified that T285 = P165 = H143 = 40755.
///
///Find the next triangle number that is also pentagonal and hexagonal.

fn next_tri_pent_hex_num() {
    //get triangle number 285
    let mut curr_num = create_triangle_number(285);
    let mut the_number = curr_num;
    let mut not_found = true;
    while not_found {
        curr_num += 1;
        if is_triangle(curr_num as f64) {
            if is_pentagonal(curr_num as f64) {
                if is_hexagonal(curr_num as f64) {
                    the_number = curr_num;
                    not_found = false;
                }
            }
        }
    }

    println!("Next number that is triangle, pentagonal, hexagonal is: {the_number}");
}

mod test {
    use super::*;

    #[test]
    fn test_create_tri_num() {
        let num = create_triangle_number(285);

        assert_eq!(num, 40755);
    }

    #[test]
    fn test_next_tri_pen_hex_num() {
        next_tri_pent_hex_num();
    }
}
